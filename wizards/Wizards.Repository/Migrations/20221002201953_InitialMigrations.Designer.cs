// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wizards.Repository;

#nullable disable

namespace Wizards.Repository.Migrations
{
    [DbContext(typeof(WizardsContext))]
    [Migration("20221002201953_InitialMigrations")]
    partial class InitialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("AvatarImageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Profession")
                        .HasColumnType("int");

                    b.Property<int>("StatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId")
                        .IsUnique();

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("StatisticsId")
                        .IsUnique();

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.HeroItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<bool>("InUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("ItemEndurance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(100.0);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.HasIndex("ItemId");

                    b.ToTable("HeroItems");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.HeroSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<bool>("InUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("SlotNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("HeroId", "SkillId")
                        .IsUnique();

                    b.ToTable("HeroSkills");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Restriction")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId")
                        .IsUnique();

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributesId = 1,
                            BuyPrice = 100,
                            Name = "Normal Staff",
                            Restriction = 1,
                            SellPrice = 80,
                            Tier = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            AttributesId = 2,
                            BuyPrice = 600,
                            Name = "Fine Staff",
                            Restriction = 1,
                            SellPrice = 480,
                            Tier = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            AttributesId = 3,
                            BuyPrice = 3000,
                            Name = "Great Staff",
                            Restriction = 1,
                            SellPrice = 2400,
                            Tier = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            AttributesId = 4,
                            BuyPrice = 12000,
                            Name = "Enchanted Staff",
                            Restriction = 1,
                            SellPrice = 9600,
                            Tier = 4,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            AttributesId = 5,
                            BuyPrice = 36000,
                            Name = "Masterpiece Staff",
                            Restriction = 1,
                            SellPrice = 28800,
                            Tier = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            AttributesId = 6,
                            BuyPrice = 100,
                            Name = "Normal Spell-book",
                            Restriction = 1,
                            SellPrice = 80,
                            Tier = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            AttributesId = 7,
                            BuyPrice = 600,
                            Name = "Fine Spell-book",
                            Restriction = 1,
                            SellPrice = 480,
                            Tier = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            AttributesId = 8,
                            BuyPrice = 3000,
                            Name = "Great Spell-book",
                            Restriction = 1,
                            SellPrice = 2400,
                            Tier = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            AttributesId = 9,
                            BuyPrice = 12000,
                            Name = "Enchanted Spell-book",
                            Restriction = 1,
                            SellPrice = 9600,
                            Tier = 4,
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            AttributesId = 10,
                            BuyPrice = 36000,
                            Name = "Masterpiece Spell-book",
                            Restriction = 1,
                            SellPrice = 28800,
                            Tier = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            AttributesId = 11,
                            BuyPrice = 100,
                            Name = "Normal Scepter",
                            Restriction = 1,
                            SellPrice = 80,
                            Tier = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 12,
                            AttributesId = 12,
                            BuyPrice = 600,
                            Name = "Fine Scepter",
                            Restriction = 1,
                            SellPrice = 480,
                            Tier = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            AttributesId = 13,
                            BuyPrice = 3000,
                            Name = "Great Scepter",
                            Restriction = 1,
                            SellPrice = 2400,
                            Tier = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            AttributesId = 14,
                            BuyPrice = 12000,
                            Name = "Enchanted Scepter",
                            Restriction = 1,
                            SellPrice = 9600,
                            Tier = 4,
                            Type = 0
                        },
                        new
                        {
                            Id = 15,
                            AttributesId = 15,
                            BuyPrice = 36000,
                            Name = "Masterpiece Scepter",
                            Restriction = 1,
                            SellPrice = 28800,
                            Tier = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = 16,
                            AttributesId = 16,
                            BuyPrice = 50,
                            Name = "Normal Vestments",
                            Restriction = 1,
                            SellPrice = 40,
                            Tier = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            AttributesId = 17,
                            BuyPrice = 300,
                            Name = "Fine Vestments",
                            Restriction = 1,
                            SellPrice = 240,
                            Tier = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            AttributesId = 18,
                            BuyPrice = 1500,
                            Name = "Great Vestments",
                            Restriction = 1,
                            SellPrice = 1200,
                            Tier = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            AttributesId = 19,
                            BuyPrice = 6000,
                            Name = "Enchanted Vestments",
                            Restriction = 1,
                            SellPrice = 4800,
                            Tier = 4,
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            AttributesId = 20,
                            BuyPrice = 18000,
                            Name = "Masterpiece Vestments",
                            Restriction = 1,
                            SellPrice = 14400,
                            Tier = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            AttributesId = 21,
                            BuyPrice = 50,
                            Name = "Normal Mantle",
                            Restriction = 1,
                            SellPrice = 40,
                            Tier = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            AttributesId = 22,
                            BuyPrice = 300,
                            Name = "Fine Mantle",
                            Restriction = 1,
                            SellPrice = 240,
                            Tier = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            AttributesId = 23,
                            BuyPrice = 1500,
                            Name = "Great Mantle",
                            Restriction = 1,
                            SellPrice = 1200,
                            Tier = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            AttributesId = 24,
                            BuyPrice = 6000,
                            Name = "Enchanted Mantle",
                            Restriction = 1,
                            SellPrice = 4800,
                            Tier = 4,
                            Type = 1
                        },
                        new
                        {
                            Id = 25,
                            AttributesId = 25,
                            BuyPrice = 18000,
                            Name = "Masterpiece Mantle",
                            Restriction = 1,
                            SellPrice = 14400,
                            Tier = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = 26,
                            AttributesId = 26,
                            BuyPrice = 50,
                            Name = "Normal Overcoat",
                            Restriction = 1,
                            SellPrice = 40,
                            Tier = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 27,
                            AttributesId = 27,
                            BuyPrice = 300,
                            Name = "Fine Overcoat",
                            Restriction = 1,
                            SellPrice = 240,
                            Tier = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 28,
                            AttributesId = 28,
                            BuyPrice = 1500,
                            Name = "Great Overcoat",
                            Restriction = 1,
                            SellPrice = 1200,
                            Tier = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = 29,
                            AttributesId = 29,
                            BuyPrice = 6000,
                            Name = "Enchanted Overcoat",
                            Restriction = 1,
                            SellPrice = 4800,
                            Tier = 4,
                            Type = 1
                        },
                        new
                        {
                            Id = 30,
                            AttributesId = 30,
                            BuyPrice = 18000,
                            Name = "Masterpiece Overcoat",
                            Restriction = 1,
                            SellPrice = 14400,
                            Tier = 5,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ActiveHeroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ActiveItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.HeroAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DailyRewardEnergy")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("Precision")
                        .HasColumnType("int");

                    b.Property<int>("Reflex")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HeroAttributes");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.ItemAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("Precision")
                        .HasColumnType("int");

                    b.Property<int>("Reflex")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Damage = 7,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 15,
                            Reflex = 0,
                            Specialization = -8
                        },
                        new
                        {
                            Id = 2,
                            Damage = 14,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 20,
                            Reflex = 0,
                            Specialization = -6
                        },
                        new
                        {
                            Id = 3,
                            Damage = 21,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 25,
                            Reflex = 0,
                            Specialization = -4
                        },
                        new
                        {
                            Id = 4,
                            Damage = 28,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 30,
                            Reflex = 0,
                            Specialization = -2
                        },
                        new
                        {
                            Id = 5,
                            Damage = 35,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 35,
                            Reflex = 0,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 6,
                            Damage = 8,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = -8,
                            Reflex = 0,
                            Specialization = 30
                        },
                        new
                        {
                            Id = 7,
                            Damage = 16,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = -6,
                            Reflex = 0,
                            Specialization = 35
                        },
                        new
                        {
                            Id = 8,
                            Damage = 24,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = -4,
                            Reflex = 0,
                            Specialization = 40
                        },
                        new
                        {
                            Id = 9,
                            Damage = 32,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = -2,
                            Reflex = 0,
                            Specialization = 45
                        },
                        new
                        {
                            Id = 10,
                            Damage = 40,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 0,
                            Reflex = 0,
                            Specialization = 50
                        },
                        new
                        {
                            Id = 11,
                            Damage = 9,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 12,
                            Reflex = 0,
                            Specialization = 3
                        },
                        new
                        {
                            Id = 12,
                            Damage = 18,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 14,
                            Reflex = 0,
                            Specialization = 6
                        },
                        new
                        {
                            Id = 13,
                            Damage = 27,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 16,
                            Reflex = 0,
                            Specialization = 9
                        },
                        new
                        {
                            Id = 14,
                            Damage = 36,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 18,
                            Reflex = 0,
                            Specialization = 12
                        },
                        new
                        {
                            Id = 15,
                            Damage = 45,
                            Defense = 0,
                            MaxHealth = 0,
                            Precision = 20,
                            Reflex = 0,
                            Specialization = 15
                        },
                        new
                        {
                            Id = 16,
                            Damage = 0,
                            Defense = -8,
                            MaxHealth = 25,
                            Precision = 0,
                            Reflex = 15,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 17,
                            Damage = 0,
                            Defense = -6,
                            MaxHealth = 75,
                            Precision = 0,
                            Reflex = 20,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 18,
                            Damage = 0,
                            Defense = -4,
                            MaxHealth = 125,
                            Precision = 0,
                            Reflex = 25,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 19,
                            Damage = 0,
                            Defense = -2,
                            MaxHealth = 175,
                            Precision = 0,
                            Reflex = 30,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 20,
                            Damage = 0,
                            Defense = 0,
                            MaxHealth = 225,
                            Precision = 0,
                            Reflex = 35,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 21,
                            Damage = 0,
                            Defense = 30,
                            MaxHealth = 25,
                            Precision = 0,
                            Reflex = -8,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 22,
                            Damage = 0,
                            Defense = 35,
                            MaxHealth = 75,
                            Precision = 0,
                            Reflex = -6,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 23,
                            Damage = 0,
                            Defense = 40,
                            MaxHealth = 125,
                            Precision = 0,
                            Reflex = -4,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 24,
                            Damage = 0,
                            Defense = 45,
                            MaxHealth = 175,
                            Precision = 0,
                            Reflex = -2,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 25,
                            Damage = 0,
                            Defense = 50,
                            MaxHealth = 225,
                            Precision = 0,
                            Reflex = 0,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 26,
                            Damage = 0,
                            Defense = 15,
                            MaxHealth = 25,
                            Precision = 0,
                            Reflex = 4,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 27,
                            Damage = 0,
                            Defense = 20,
                            MaxHealth = 75,
                            Precision = 0,
                            Reflex = 8,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 28,
                            Damage = 0,
                            Defense = 25,
                            MaxHealth = 125,
                            Precision = 0,
                            Reflex = 12,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 29,
                            Damage = 0,
                            Defense = 30,
                            MaxHealth = 175,
                            Precision = 0,
                            Reflex = 16,
                            Specialization = 0
                        },
                        new
                        {
                            Id = 30,
                            Damage = 0,
                            Defense = 35,
                            MaxHealth = 225,
                            Precision = 0,
                            Reflex = 20,
                            Specialization = 0
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RankPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalMatchLoose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalMatchPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalMatchWin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmorPenetrationPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BaseHitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("DamageFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("HealingFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfessionRestriction")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 80,
                            DamageFactor = 1.0,
                            Description = "Hit enemy with sphere of fire",
                            HealingFactor = 0.0,
                            Name = "Fireball",
                            ProfessionRestriction = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 125,
                            DamageFactor = 0.75,
                            Description = "Throw ice shard that deals damage and stops enemy movement",
                            HealingFactor = 0.0,
                            Name = "Ice Shard",
                            ProfessionRestriction = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            ArmorPenetrationPercent = 15,
                            BaseHitChance = 50,
                            DamageFactor = 1.3999999999999999,
                            Description = "Summon lighting strike that breaks enemy defense and deal lot of damage",
                            HealingFactor = 0.0,
                            Name = "Lighting Strike",
                            ProfessionRestriction = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            ArmorPenetrationPercent = 10,
                            BaseHitChance = 30,
                            DamageFactor = 1.75,
                            Description = "Create fire field under enemy that deals very high damage to enemy",
                            HealingFactor = 0.0,
                            Name = "Inferno",
                            ProfessionRestriction = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 200,
                            DamageFactor = 0.0,
                            Description = "Create spring that recovers your health",
                            HealingFactor = 0.10000000000000001,
                            Name = "Renewal Fountain",
                            ProfessionRestriction = 1,
                            Type = 3
                        },
                        new
                        {
                            Id = 6,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 300,
                            DamageFactor = 0.0,
                            Description = "Create magnetic barrier in front of you that protect you from enemy attacks",
                            HealingFactor = 0.0,
                            Name = "Magnetic Shield",
                            ProfessionRestriction = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 85,
                            DamageFactor = 1.0,
                            Description = "",
                            HealingFactor = 0.0,
                            Name = "Necro1",
                            ProfessionRestriction = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            ArmorPenetrationPercent = 30,
                            BaseHitChance = 100,
                            DamageFactor = 0.5,
                            Description = "",
                            HealingFactor = 0.0,
                            Name = "Necro2",
                            ProfessionRestriction = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            ArmorPenetrationPercent = 40,
                            BaseHitChance = 70,
                            DamageFactor = 1.1000000000000001,
                            Description = "",
                            HealingFactor = 0.0,
                            Name = "Necro3",
                            ProfessionRestriction = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            ArmorPenetrationPercent = 40,
                            BaseHitChance = 55,
                            DamageFactor = 1.5,
                            Description = "",
                            HealingFactor = 0.0,
                            Name = "Necro4",
                            ProfessionRestriction = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 100,
                            DamageFactor = 0.0,
                            Description = "",
                            HealingFactor = 0.11,
                            Name = "Necro5",
                            ProfessionRestriction = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = 12,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 100,
                            DamageFactor = 0.0,
                            Description = "",
                            HealingFactor = 0.0,
                            Name = "Necro6",
                            ProfessionRestriction = 2,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributesId")
                        .HasColumnType("int");

                    b.Property<int>("AvatarImageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("EnemyStageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("GoldReward")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("RankPointsReward")
                        .HasColumnType("int");

                    b.Property<int>("StageBackgroundImageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<bool>("TrainingEnemy")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId")
                        .IsUnique();

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributesId = 1,
                            AvatarImageNumber = 1,
                            Description = "Dangerous enemy with high reflex and strong attacks that overpass armor. Many of attacks can be dodge if you have high reflex. To hit this boss you must be precise! Hydra from time to time will charge on you and after it will cast deadly attack so very important is to successfully counter it's charge. Below 33% health hydra has to be defeated in less than 16 rounds so you have to be perfect at your damage!",
                            EnemyStageName = "Lair of Crystalline Hydra",
                            GoldReward = 3000,
                            Name = "Crystalline Hydra",
                            RankPointsReward = 100,
                            StageBackgroundImageNumber = 1,
                            Tier = 5,
                            TrainingEnemy = false,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.BehaviorPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealthPercentToTrigger")
                        .HasColumnType("int");

                    b.Property<int>("MinHealthPercentToTrigger")
                        .HasColumnType("int");

                    b.Property<string>("SequenceOfSkillsId")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.ToTable("BehaviorPatterns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnemyId = 1,
                            MaxHealthPercentToTrigger = 100,
                            MinHealthPercentToTrigger = 66,
                            SequenceOfSkillsId = "[{\"SequenceStepId\":1,\"SkillId\":1},{\"SequenceStepId\":2,\"SkillId\":1},{\"SequenceStepId\":3,\"SkillId\":2},{\"SequenceStepId\":4,\"SkillId\":1},{\"SequenceStepId\":5,\"SkillId\":1},{\"SequenceStepId\":6,\"SkillId\":7},{\"SequenceStepId\":7,\"SkillId\":3},{\"SequenceStepId\":8,\"SkillId\":2}]"
                        },
                        new
                        {
                            Id = 2,
                            EnemyId = 1,
                            MaxHealthPercentToTrigger = 66,
                            MinHealthPercentToTrigger = 33,
                            SequenceOfSkillsId = "[{\"SequenceStepId\":1,\"SkillId\":1},{\"SequenceStepId\":2,\"SkillId\":4},{\"SequenceStepId\":3,\"SkillId\":4},{\"SequenceStepId\":4,\"SkillId\":5},{\"SequenceStepId\":5,\"SkillId\":2},{\"SequenceStepId\":6,\"SkillId\":2},{\"SequenceStepId\":7,\"SkillId\":5},{\"SequenceStepId\":8,\"SkillId\":7},{\"SequenceStepId\":9,\"SkillId\":8},{\"SequenceStepId\":10,\"SkillId\":2},{\"SequenceStepId\":11,\"SkillId\":4},{\"SequenceStepId\":12,\"SkillId\":5},{\"SequenceStepId\":13,\"SkillId\":7},{\"SequenceStepId\":14,\"SkillId\":9}]"
                        },
                        new
                        {
                            Id = 3,
                            EnemyId = 1,
                            MaxHealthPercentToTrigger = 33,
                            MinHealthPercentToTrigger = 0,
                            SequenceOfSkillsId = "[{\"SequenceStepId\":1,\"SkillId\":4},{\"SequenceStepId\":2,\"SkillId\":5},{\"SequenceStepId\":3,\"SkillId\":4},{\"SequenceStepId\":4,\"SkillId\":4},{\"SequenceStepId\":5,\"SkillId\":7},{\"SequenceStepId\":6,\"SkillId\":9},{\"SequenceStepId\":7,\"SkillId\":4},{\"SequenceStepId\":8,\"SkillId\":5},{\"SequenceStepId\":9,\"SkillId\":5},{\"SequenceStepId\":10,\"SkillId\":7},{\"SequenceStepId\":11,\"SkillId\":9},{\"SequenceStepId\":12,\"SkillId\":4},{\"SequenceStepId\":13,\"SkillId\":7},{\"SequenceStepId\":14,\"SkillId\":9},{\"SequenceStepId\":15,\"SkillId\":6},{\"SequenceStepId\":16,\"SkillId\":10}]"
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.EnemyAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Defense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MaxHealth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Precision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Reflex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Specialization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("EnemiesAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Damage = 50,
                            Defense = 0,
                            MaxHealth = 2500,
                            Precision = 0,
                            Reflex = 35,
                            Specialization = 50
                        });
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.EnemySkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmorPenetrationPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BaseHitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("DamageFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<double>("HealingFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.ToTable("EnemiesSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 100,
                            DamageFactor = 0.14999999999999999,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Bite",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 85,
                            DamageFactor = 0.25,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Triple bite",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 70,
                            DamageFactor = 0.55000000000000004,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Tail swipe",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 105,
                            DamageFactor = 0.20000000000000001,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Scratch",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 90,
                            DamageFactor = 0.29999999999999999,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Sneaky claw",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 85,
                            DamageFactor = 0.55000000000000004,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Smashing tail",
                            Type = 4
                        },
                        new
                        {
                            Id = 7,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 200,
                            DamageFactor = 0.65000000000000002,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Rage",
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            ArmorPenetrationPercent = 0,
                            BaseHitChance = 300,
                            DamageFactor = 0.0,
                            EnemyId = 1,
                            HealingFactor = 0.14999999999999999,
                            Name = "Roar!",
                            Type = 5
                        },
                        new
                        {
                            Id = 9,
                            ArmorPenetrationPercent = 150,
                            BaseHitChance = 300,
                            DamageFactor = 2.0,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Deadly blast",
                            Type = 3
                        },
                        new
                        {
                            Id = 10,
                            ArmorPenetrationPercent = 150,
                            BaseHitChance = 300,
                            DamageFactor = 5.0,
                            EnemyId = 1,
                            HealingFactor = 0.0,
                            Name = "Destructive shock wave",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizards.Core.Model.UserModels.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Hero", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Properties.HeroAttributes", "Attributes")
                        .WithOne("Hero")
                        .HasForeignKey("Wizards.Core.Model.UserModels.Hero", "AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizards.Core.Model.UserModels.Player", "Player")
                        .WithMany("Heroes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizards.Core.Model.UserModels.Properties.Statistics", "Statistics")
                        .WithOne("Hero")
                        .HasForeignKey("Wizards.Core.Model.UserModels.Hero", "StatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");

                    b.Navigation("Player");

                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.HeroItem", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Hero", "Hero")
                        .WithMany("Inventory")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizards.Core.Model.UserModels.Item", "Item")
                        .WithMany("Heroes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.HeroSkill", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Hero", "Hero")
                        .WithMany("Skills")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wizards.Core.Model.UserModels.Skill", "Skill")
                        .WithMany("Hero")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Item", b =>
                {
                    b.HasOne("Wizards.Core.Model.UserModels.Properties.ItemAttributes", "Attributes")
                        .WithOne("Item")
                        .HasForeignKey("Wizards.Core.Model.UserModels.Item", "AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Enemy", b =>
                {
                    b.HasOne("Wizards.Core.Model.WorldModels.Properties.EnemyAttributes", "Attributes")
                        .WithOne("Enemy")
                        .HasForeignKey("Wizards.Core.Model.WorldModels.Enemy", "AttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.BehaviorPattern", b =>
                {
                    b.HasOne("Wizards.Core.Model.WorldModels.Enemy", "Enemy")
                        .WithMany("BehaviorPatterns")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.EnemySkill", b =>
                {
                    b.HasOne("Wizards.Core.Model.WorldModels.Enemy", "Enemy")
                        .WithMany("Skills")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Hero", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Item", b =>
                {
                    b.Navigation("Heroes");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Player", b =>
                {
                    b.Navigation("Heroes");
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.HeroAttributes", b =>
                {
                    b.Navigation("Hero")
                        .IsRequired();
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.ItemAttributes", b =>
                {
                    b.Navigation("Item")
                        .IsRequired();
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Properties.Statistics", b =>
                {
                    b.Navigation("Hero")
                        .IsRequired();
                });

            modelBuilder.Entity("Wizards.Core.Model.UserModels.Skill", b =>
                {
                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Enemy", b =>
                {
                    b.Navigation("BehaviorPatterns");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Wizards.Core.Model.WorldModels.Properties.EnemyAttributes", b =>
                {
                    b.Navigation("Enemy")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
